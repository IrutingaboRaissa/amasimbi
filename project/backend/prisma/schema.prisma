// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  displayName String
  age         Int
  phone       String?
  location    String?
  bio         String?
  education   String?
  interests   String[]
  avatar      String?
  createdAt   DateTime  @default(now())
  lastActive  DateTime  @updatedAt
  posts       Post[]
  comments    Comment[]
  activities  Activity[]
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  authorId  String?
  author    User?     @relation(fields: [authorId], references: [id])
  isAnonymous Boolean @default(false)
  anonymousId String? @unique // For tracking anonymous posts
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  isAnonymous Boolean @default(false)
  anonymousId String? @unique // For tracking anonymous comments
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Activity {
  id        String   @id @default(uuid())
  type      String   // e.g., "login", "profile_update", "post_created"
  details   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}